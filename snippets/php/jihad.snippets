# Jihad name
snippet jclass
	`JihadClassName()`
# Jihad description
snippet jdesc
	`JihadClassDescription()`
snippet juser
	Jihad_Modules_User_Model_User
snippet juseri
	Jihad_Modules_User_UserInterface
snippet jcont
	$this->getIM()->controller->${1}
snippet jtempl
	$this->getIM()->templater->${1}
snippet jmanag
	$this->getIM()->manager->${1}
snippet jim
	$this->getIM()->${1}
snippet jlink
	$this->getIM()->links->${1}
snippet jutils
	$this->getUtils()->${1}
snippet jm
	Jihad_Modules_${1}
snippet jmc
	Jihad_Modules_Core${1}
snippet jme
	throw new Jihad_Modules_Exception(${1});
# Jihad controller class
snippet controller
	/**
	 * `JihadClassDescription()`
	 *
	 * @uses Jihad_Modules_CoreController_ReflectionAbstract
	 * @author `JihadProjectAuthor()`
	 */

	class `JihadClassName()` extends Jihad_Modules_CoreController_ReflectionAbstract
	{
	    /**
		 * Default action
		 *
		 * @type string
		 */

		const DefaultAction = 'Default';

		/**
		 * Returns controller name
		 *
		 * @access public
		 * @return array
		 */

		public function getSupportedNames()
		{
			return array(
				'`JihadClassPart('jihad_path')`',
			);
		}

		/**
		 * Page default
		 *
		 * @param array $params
		 * @access public
		 * @return void
		 */

		public function pageDefault($params)
		{
			${1};
		}
	}
# Jihad links class
snippet link
	/**
	 * `JihadClassDescription()`
	 *
	 * @uses Jihad_Modules_CoreLink_LinkAbstract
	 * @author `JihadProjectAuthor()`
	 */

	class `JihadClassName()` extends Jihad_Modules_CoreLink_LinkAbstract
	{
		/**
		 * Returns supported names
		 *
		 * @access public
		 * @return array
		 */

		public function getSupportedNames()
		{
			return array(
				'`JihadClassPart('jihad_path')`',
			);
		}

		/**
		 * Link main
		 *
		 * @access protected
		 * @return string
		 */

		protected function linkMain(${1})
		{
			return '${2}';
		}
	}
# Jihad manager class
snippet manager
	/**
	 * `JihadClassDescription()`
	 *
	 * @uses Jihad_Modules_CoreManager_ManagerAbstract
	 * @author `JihadProjectAuthor()`
	 */

	class `JihadClassName()` extends Jihad_Modules_CoreManager_ManagerAbstract
	{
		/**
		 * Returns supported names list
		 *
		 * @access public
		 * @return array
		 */

		public function getSupportedNames()
		{
			return array(
				'`JihadClassPart('jihad_path')`',${1}
			);
		}
	}
# Jihad model class
snippet model
	/**
	 * `JihadClassDescription()`
	 *
	 * @uses Jihad_Modules_CoreOldOrm_ObjectAbstract
	 * @author `JihadProjectAuthor()`
	 */

	class `JihadClassName()` extends Jihad_Modules_CoreOldOrm_ObjectAbstract
	{
		/**
		 * Function returns structure of object
		 *
		 * @access public
		 * @return array
		 */

		public function processStructure()
		{
			return array(
				'table'     => '`JihadClassPart('jihad_name')`s',
				'fields'    => array(
					'id' => array(
						'title'     => 'ID',
						'type'      => 'auto',
						'required'  => true,
					),${1}
					'added' => array(
						'title'     => 'Added',
						'type'      => 'datetime',
						'required'  => true,
					),
					'changed' => array(
						'title'     => 'Changed',
						'type'      => 'datetime',
						'required'  => true,
					),
				),
				'indexes' => array(
				),
				'primary' => array('id'),
			);
		}

		/**
		 * Notification of changes occurring over the sample.
		 *
		 * @param int       $action
		 * @param array     $fields_changed
		 * @param object    $orig_object
		 * @access protected
		 * @return void
		 */

		protected function on_change_single($action, array $fields_changed, $orig_object = null)
		{
			parent::on_change_single($action, $fields_changed, $orig_object);

			$this->getIM()->manager->orm->cache->clear(
				$this,
				$orig_object,
				$fields_changed,
				array(
					'id' => function($object)
					{
					},
				),
				array(
				)
			);
		}
	}
# Jihad model dictionary class
snippet dict_model
	/**
	 * `JihadClassDescription()`
	 *
	 * @uses Jihad_Modules_CoreHelper_Model_DictionaryAbstract
	 * @author `JihadProjectAuthor()`
	 */

	class `JihadClassName()` extends Jihad_Modules_CoreHelper_Model_DictionaryAbstract
	{
		/**
		 * Editable fields
		 *
		 * @var array
		 * @access protected
		 */

		protected $editableFields = array(
		);

		/**
		 * Function returns structure of object
		 *
		 * @access public
		 * @return array
		 */

		public function processStructure()
		{
			return array_replace_recursive(
				parent::processStructure(),
				array(
					'table' => '`JihadClassPart('jihad_name')`s',
					'fields' => array(
						${1}
					),
					'indexes' => array(
					),
				)
			);
		}

		/**
		 * Notification of changes occurring over the sample.
		 *
		 * @param int       $action
		 * @param array     $fields_changed
		 * @param object    $orig_object
		 * @access protected
		 * @return void
		 */

		protected function on_change_single($action, array $fields_changed, $orig_object = null)
		{
			parent::on_change_single($action, $fields_changed, $orig_object);

			$this->getIM()->manager->orm->cache->clear(
				$this,
				$orig_object,
				$fields_changed,
				array(
					'id' => function($object)
					{
					},
				),
				array(
				)
			);
		}
	}
# Auto script
snippet auto
	/**
	 * `JihadClassDescription()`
	 *
	 * @uses Jihad_Modules_CoreRunner_RunableAbstract
	 * @author `JihadProjectAuthor()`
	 */

	class `JihadClassName()` extends Jihad_Modules_CoreRunner_RunableAbstract
	{
		/**
		 * Returns list of rules
		 *
		 * @access protected
		 * @return array
		 */

		protected function getRules()
		{
			return array_replace(
				parent::getRules(),
				array(
				)
			);
		}

		/**
		 * Process
		 *
		 * @access protected
		 * @return void
		 */

		protected function process()
		{
			${1};
		}
	}
# Forms
	/**
	 * `JihadClassDescription()`
	 *
	 * @uses Jihad_Modules_CoreForm_ObjectAbstract
	 * @author `JihadProjectAuthor()`
	 */

	class `JihadClassName()` extends Jihad_Modules_CoreForm_ObjectAbstract
	{
		/**
		 * Function returns structure of object
		 *
		 * @access public
		 * @return array
		 */

		public function processStructure()
		{
			return array(
				'fields' => array(
					'${1}' => array(
						'type'      => 'text',
						'required'  => false,
						'n12s'      => array(
						),
						'v9s'      => array(
						),
					),
				),
				'submits' => array(
					'submit' => array(
					),
				),
			);
		}

		/**
		 * Returns signature params
		 *
		 * @access protected
		 * @return array
		 */

		protected function _getSignatureParams()
		{
			return array(
			);
		}
	}
